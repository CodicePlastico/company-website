{"version":3,"sources":["webpack:///./src/assets/venues/barlow_condensed.ttf","webpack:///./src/components/venues/planet.ts","webpack:///./src/components/venues/universe.ts","webpack:///./src/components/venues/venues.tsx","webpack:///./node_modules/core-js/modules/_string-html.js"],"names":["module","exports","Planet","planetId","planetName","startX","startY","size","img","this","coordinates","x","y","xDirection","Math","random","yDirection","nextCoordinates","setCoordinates","coords","getCenter","halfSize","floor","invertDirection","axis","fixMovement","universe","nextCoords","isHorizontalOutside","isVerticalOutside","Universe","p5","width","height","detectCollision","planet1","planet2","firstCenter","secondCenter","dist","leftSide","planet","Venues","font","planets","mobile","window","innerWidth","fontSize","fontBgWidth","fontBgHeight","files","preload","universeWidth","min","universeHeight","innerHeight","venues","data","loadFont","fontFile","planetsSize","reduce","sum","ven","sizeProportion","offset","length","acc","v","queryImg","picture","fluidImg","childImageSharp","fluid","src","loadImage","id","name","setup","canvasParentRef","createCanvas","parent","frameRate","textFont","draw","background","noFill","stroke","strokeWeight","forEach","p","i","j","firstP","secondP","bC","second","first","x1","y1","x2","y2","x3","y3","x4","y4","bezier","textSize","image","center","textPosition","textBox","textBounds","fill","rect","text","w","h","$export","fails","defined","quot","createHTML","string","tag","attribute","value","S","String","p1","replace","NAME","exec","O","P","F","test","toLowerCase","split"],"mappings":"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","file":"15-43afaee17698ec0f3c5d.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/barlow_condensed-53a17088024b346c54ca3e5bf8cc15ee.ttf\";","import p5Types from 'p5'\nimport { Coordinates, Axis } from './model'\n\nclass Planet {\n  planetId: string\n  planetName: string\n  coordinates: Coordinates\n  size: number\n  img: p5Types.Image\n  xDirection: number;\n  yDirection: number;\n\n  constructor(planetId: string, planetName: string, startX: number, startY: number, size: number, img: p5Types.Image) {\n    this.planetName = planetName\n    this.planetId = planetId,\n    this.coordinates = {x: startX, y: startY}\n    this.size = size\n    this.img = img\n    this.xDirection = Math.random() > 0.5 ? 1 : -1;\n    this.yDirection = Math.random() > 0.5 ? 1 : -1;\n  }\n\n  nextCoordinates(): Coordinates {\n    const x = this.coordinates.x + this.xDirection\n    const y = this.coordinates.y + this.yDirection\n    return {x, y}\n  }\n\n  setCoordinates(coords: Coordinates) {\n    this.coordinates = coords;\n  }\n\n  getCenter(): Coordinates {\n    const halfSize = Math.floor(this.size / 2)\n    return {x: this.coordinates.x + halfSize, y: this.coordinates.y + halfSize}\n  }\n\n  invertDirection(axis?: Axis) {\n    switch (axis) {\n      case 'x':\n        this.xDirection = -1 * this.xDirection\n        break;\n      case 'y':\n        this.yDirection = -1 * this.yDirection\n        break;\n      default:\n        this.xDirection = -1 * this.xDirection\n        this.yDirection = -1 * this.yDirection\n    }\n  }\n\n  fixMovement(universe) {\n    const nextCoords = this.nextCoordinates();\n    let x = nextCoords.x\n    let y = nextCoords.y\n    if (universe.isHorizontalOutside(nextCoords.x, this.size)) {\n      this.invertDirection('x')\n      x = this.coordinates.x\n    }\n    if (universe.isVerticalOutside(nextCoords.y, this.size)) {\n      this.invertDirection('y')\n      y = this.coordinates.y\n    }\n    this.setCoordinates({x, y})\n\n  }\n}\n\nexport default Planet","import Planet from \"./planet\"\nimport p5Types from 'p5'\n\nclass Universe {\n  width: number\n  height: number\n  p5: p5Types\n\n  constructor(p5: p5Types, width: number, height: number) {\n    this.width = width\n    this.height = height\n    this.p5 = p5\n  }\n\n  isHorizontalOutside(x: number, size: number): boolean {\n    return x > this.width - size || x < 0\n  }\n\n  isVerticalOutside(y: number, size: number): boolean {\n    return y > this.height - size || y < 0\n  }\n\n  detectCollision(planet1: Planet, planet2: Planet) {\n    const firstCenter = planet1.getCenter()\n    const secondCenter = planet2.getCenter()\n    const dist = this.p5.dist(firstCenter.x, firstCenter.y, secondCenter.x, secondCenter.y)\n    const firstSize = Math.floor(planet1.size / 2)\n    const secondSize = Math.floor(planet2.size / 2)\n    const collision = dist <= (firstSize + secondSize)\n    return collision;\n  }\n\n  leftSide(planet) {\n    const center = planet.getCenter()\n    return (center.x < (this.width / 2))\n  }\n}\n\nexport default Universe","import React from 'react'\nimport Sketch from 'react-p5'\nimport p5Types from 'p5'\n\nimport data from '../../assets/venues/venues.json'\n\nimport fontFile from '../../assets/venues/barlow_condensed.ttf'\n\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Planet from './planet'\nimport Universe from './universe'\n\nconst Venues: React.FC<{}> = () => {\n  let universe: Universe\n  let planets: Planet[] = []\n  const mobile = window.innerWidth < 769\n  const frameRate = 30\n  const fontSize = mobile ? 12 : 16\n  const fontBgWidth = mobile ? 60 : 100\n  const fontBgHeight = mobile ? 22 : 26\n  let font\n\n  const files = useStaticQuery(graphql`\n    query MyQuery {\n      headquarter: file(relativePath: { eq: \"venues/cpship.png\" }) {\n        childImageSharp {\n          fluid {\n            src\n            presentationHeight\n            presentationWidth\n          }\n        }\n      }\n      planet1: file(relativePath: { eq: \"venues/planet1.png\" }) {\n        childImageSharp {\n          fluid {\n            src\n            presentationHeight\n            presentationWidth\n          }\n        }\n      }\n      planet2: file(relativePath: { eq: \"venues/planet2.png\" }) {\n        childImageSharp {\n          fluid {\n            src\n            presentationHeight\n            presentationWidth\n          }\n        }\n      },\n      font: file(relativePath: { eq: \"venues/barlow_condensed.ttf\" }) {\n        publicURL\n      }\n    }`\n  )\n\n  const calculateBezierCoords = (first: Planet, second: Planet) => {\n    const firstCenter = first.getCenter()\n    const secondCenter = second.getCenter()\n    return {\n      x1: firstCenter.x,\n      y1: firstCenter.y,\n      x2: firstCenter.x + first.size, \n      y2: firstCenter.y + first.size, \n      x3: secondCenter.x - second.size, \n      y3: secondCenter.y - second.size,\n      x4: secondCenter.x, \n      y4: secondCenter.y\n    }\n  }\n\n  const preload = (p5: p5Types) => {\n    const universeWidth = p5.min(1600, window.innerWidth - 40)\n    const universeHeight = p5.min(1000, window.innerHeight - 200)\n    universe = new Universe(p5, universeWidth, universeHeight)\n    const { venues } = data \n    font = p5.loadFont(fontFile)\n    let startX = 0\n    const planetsSize = venues.reduce((sum, ven) => {\n      return sum + ven.size + 30\n    }, 0)\n    const sizeProportion = planetsSize < universeWidth ? 1 : planetsSize / universeWidth;\n    const offset = planetsSize > universeWidth ? 10 : Math.floor((universeWidth - planetsSize) / venues.length);\n    planets = venues.reduce((acc, v) => {\n      const queryImg = files[v.picture]\n      if (queryImg){\n        const fluidImg = queryImg.childImageSharp.fluid.src\n        const img = p5.loadImage(fluidImg)\n        const size = Math.floor(v.size / sizeProportion)\n        const startY = p5.random(0, universeHeight - size)\n        const planet = new Planet(v.id, v.name, startX, startY, size, img)\n        startX = startX + size + offset\n        return [...acc, planet]\n      }\n      return acc\n    }, [])\n  }\n\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n    p5.createCanvas(universe.width, universe.height).parent(canvasParentRef)\n    p5.frameRate(frameRate)\n    p5.textFont(font);\n  }\n\n  const draw = (p5: p5Types) => {\n    p5.background(255)\n    p5.noFill()\n    p5.stroke(217, 50, 50)\n    p5.strokeWeight(3)\n    planets.forEach((p, i) => {\n      p.fixMovement(universe)\n      for (let j = i + 1; j < planets.length; j++){\n        const firstP = planets[i];\n        const secondP = planets[j];\n        if(universe.detectCollision(firstP, secondP)) {\n          firstP.invertDirection()\n          secondP.invertDirection()\n        }\n        const bC = calculateBezierCoords(firstP, secondP)\n        p5.bezier(bC.x1, bC.y1, bC.x2, bC.y2, bC.x3, bC.y3, bC.x4, bC.y4);\n      }\n    })\n    p5.textSize(fontSize);\n    p5.strokeWeight(1)  \n    planets.forEach(p => {\n      const {x, y} = p.coordinates\n      p5.image(p.img, x, y, p.size, p.size)\n    })\n    planets.forEach(p => {\n      const center = p.getCenter()\n      let textPosition = {x: center.x, y: center.y}\n      if (universe.leftSide(p)){\n        textPosition.x = center.x + (p.size / 2) - (mobile ? 0 : 40)\n      } else {\n        textPosition.x = center.x - (p.size / 2) - (mobile ? fontBgWidth : 60)\n      }\n      const textBox = font.textBounds(p.planetName, textPosition.x, textPosition.y, fontSize);\n      p5.stroke(0)\n      p5.fill(0)\n      if (p.planetId === 'headquarter') {\n        p5.stroke(217, 50, 50)\n        p5.fill(217, 50, 50)\n      }\n      p5.rect(textBox.x, textBox.y, fontBgWidth, fontBgHeight);\n      p5.stroke(255)\n      p5.fill(255)\n      p5.text(p.planetName, textPosition.x + ((fontBgWidth - textBox.w) / 2), textPosition.y + ((fontBgHeight - textBox.h) / 2));\n    })\n  }\n\n  return <Sketch preload={preload} setup={setup} draw={draw} />\n}\n\nexport default Venues\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n"],"sourceRoot":""}