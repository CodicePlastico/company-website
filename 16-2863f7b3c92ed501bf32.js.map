{"version":3,"sources":["webpack:///./src/components/team/teamCanvas.ts","webpack:///./src/components/team/memberCanvas.ts","webpack:///./src/components/team/teamRelations.tsx"],"names":["TeamCanvas","width","height","this","isHorizontalOutside","x","size","isVerticalOutside","y","leftSide","planet","getCenter","MemberCanvas","memberId","memberName","img","tags","nick","description","role","social","id","name","coordinates","halfSize","Math","floor","setNewCenter","mouseX","mouseY","TeamRelations","props","useState","members","setMembers","canvas","setCanvas","canvasEl","setCanvasEl","setSize","drag","setDrag","activeMember","setActiveMember","draggedMember","setDraggedMember","team","categories","getMainSize","ratio","mainSize","lowSize","drawCategoryRelation","category","p5","drawInfo","getLine","strokeWeight","color","r","g","b","stroke","centers","filter","m","includes","map","mb","forEach","c","i","next","drawingContext","style","setLineDash","line","toLowerCase","getActiveElement","minDist","max","member","center","dist","rightActiveMember","memberStyle","right","top","left","getMemberStyle","className","preload","min","window","innerWidth","innerHeight","columns","rows","sizes","columnSize","rowSize","squareSize","xCoord","random","yCoord","push","retrieveCenters","length","memberSize","sortableArray","array","slice","j","shuffleArray","p5Img","loadImage","draw","currentCategory","background","noFill","drawRelations","t","find","ellipse","image","drawTeam","setup","canvasParentRef","createCanvas","parent","frameRate","mouseDragged","mouseReleased","setTimeout","mouseClicked","visible","handleClick","event","stopPropagation","toggleDescription"],"mappings":"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","file":"16-2863f7b3c92ed501bf32.js","sourcesContent":["class TeamCanvas {\n  width: number\n  height: number\n\n  constructor(width: number, height: number) {\n    this.width = width\n    this.height = height\n  }\n\n  isHorizontalOutside(x: number, size: number): boolean {\n    return x > this.width - size || x < 0\n  }\n\n  isVerticalOutside(y: number, size: number): boolean {\n    return y > this.height - size || y < 0\n  }\n\n  leftSide(planet) {\n    const center = planet.getCenter()\n    return (center.x < (this.width / 2))\n  }\n}\n\nexport default TeamCanvas","import p5Types from 'p5'\nimport { Coordinates, Channel } from './model'\n\nclass MemberCanvas {\n  id: string\n  name: string\n  coordinates: Coordinates\n  size: number\n  img: p5Types.Image\n  tags: string[]\n  nick: string\n  description: string\n  role: string\n  social: Channel[]\n\n  constructor(\n    memberId: string, \n    memberName: string, \n    x: number, \n    y: number, \n    size: number, \n    img: p5Types.Image, \n    tags: string[],\n    nick: string,\n    description: string,\n    role: string,\n    social: Channel[]\n  ) {\n    this.id = memberId\n    this.name = memberName\n    this.coordinates = { x, y}\n    this.size = size\n    this.img = img\n    this.tags = tags\n    this.nick = nick\n    this.description = description\n    this.role = role \n    this.social = social\n  }\n\n  getCenter(): Coordinates {\n    const halfSize = Math.floor(this.size / 2)\n    return {\n      x: this.coordinates.x + halfSize,\n      y: this.coordinates.y + halfSize,\n    }\n  }\n\n  setNewCenter(mouseX, mouseY) {\n    const halfSize = Math.floor(this.size / 2)\n    const x = mouseX - halfSize \n    const y = mouseY - halfSize \n    this.coordinates = { x, y }\n  }\n}\n\nexport default MemberCanvas","import React, { useState } from 'react'\nimport Sketch from 'react-p5'\nimport p5Types from 'p5'\n\nimport { FullMember } from './model'\nimport TeamCanvas from './teamCanvas'\nimport MemberCanvas from './memberCanvas'\nimport MemberDescription from './memberDescription'\n\nexport interface TeamMembers {\n  team: FullMember[],\n  categories: string[]\n  currentCategory: string | null\n}\n\nconst TeamRelations = (props: TeamMembers) => {\n  const [members, setMembers] = useState([])\n  const [canvas, setCanvas] = useState<TeamCanvas>()\n  const [canvasEl, setCanvasEl] = useState()\n  const [size, setSize] = useState<number>(100)\n  const [drag, setDrag] = useState<boolean>(false) \n  const [activeMember, setActiveMember] = useState<MemberCanvas>()\n  const [draggedMember, setDraggedMember] = useState<MemberCanvas>()\n  const { team, categories } = props\n\n  const frameRate = 30\n\n  const getMainSize = (members: number, ratio: number): {mainSize: number, lowSize: number} => {\n    let mainSize = ratio;\n    let lowSize = 1;\n    while(mainSize * lowSize < members) {\n      lowSize++;\n      mainSize = ratio * lowSize;\n    }\n    return {\n      mainSize,\n      lowSize\n    }\n  }\n\n  const retrieveCenters = (width: number, height: number, members: number, p5: p5Types): {squareSize: number, centers: Coordinates[]} => {\n    let columns = 0\n    let rows = 0\n    let ratio = 0\n    if (width > height) {\n      ratio = Math.floor(width / height)\n      const sizes = getMainSize(members, ratio)\n      rows = sizes.mainSize\n      columns = sizes.lowSize\n    } else {\n      ratio = Math.floor(height / width)\n      const sizes = getMainSize(members, ratio)\n      rows = sizes.lowSize\n      columns = sizes.mainSize\n    }\n    const columnSize = Math.floor(width / columns)\n    const rowSize = Math.floor(height / rows)\n    const squareSize = p5.min(columnSize, rowSize)\n    const centers = []\n    for (let x = 0; x < columns; x++) {\n      for (let y = 0; y < rows; y++) {\n        const xCoord = x * columnSize + Math.floor(columnSize / 2) + Math.floor(p5.random(-20, 21))\n        const yCoord = y * rowSize + Math.floor(rowSize / 2) + Math.floor(p5.random(-20, 21))\n        centers.push({ x: xCoord, y: yCoord })\n      }\n    }\n    return {squareSize, centers}\n  } \n\n  const shuffleArray = (sortableArray) => {\n    const array = sortableArray.slice();\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array\n}\n  \n  const preload = (p5: p5Types) => {\n    const width = p5.min(1200, window.innerWidth - 40)\n    const height = p5.min(1000, window.innerHeight - 200)\n    const centers = retrieveCenters(width, height, team.length, p5)\n    const memberSize = Math.floor(centers.squareSize / 1.5)\n    const halfSize = Math.floor(memberSize / 2)\n    setSize(memberSize)\n    setCanvas(new TeamCanvas(width, height))\n    const coordinates = shuffleArray(centers.centers).slice(0, team.length)\n    const members = coordinates.map((c, i) => {\n      const m = team[i]\n      const p5Img = p5.loadImage(m.img)\n      const { x, y } = c\n      return new MemberCanvas(\n        m.id, \n        m.name, \n        x - halfSize, \n        y - halfSize, \n        memberSize, \n        p5Img, \n        m.tags,\n        m.nick, \n        m.description,\n        m.role,\n        m.social)\n    })\n    setMembers(members)\n  }\n\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n    const canvasEl = p5.createCanvas(canvas.width, canvas.height).parent(canvasParentRef) as unknown as any\n    setCanvasEl(canvasEl)\n    p5.frameRate(frameRate)\n  }\n\n  const drawRelations = (p5, canvasEl) => {\n    const { currentCategory } = props\n    p5.background(217, 50, 50)\n    p5.noFill()\n    if (currentCategory != 'Tutti') {\n      drawCategoryRelation(currentCategory, p5, canvasEl)\n    } else {\n      categories.forEach(c => {\n        drawCategoryRelation(c, p5, canvasEl)\n      })\n    }\n  }\n \n  const drawCategoryRelation = (category, p5, canvasEl) => {\n    const drawInfo = getLine(category)\n      p5.strokeWeight(drawInfo.strokeWeight)\n      const {r,g, b} = drawInfo.color\n      p5.stroke(r, g, b)\n      const centers = members.filter(m => {\n        return m.tags && m.tags.includes(category)\n      }).map(mb => mb.getCenter())\n      centers.forEach((c, i) => {\n        const next = centers[i + 1]\n        if (next && canvasEl.drawingContext) {\n          if (drawInfo.style === 'dash'){\n            canvasEl.drawingContext.setLineDash([5, 10]);\n          } else {\n            canvasEl.drawingContext.setLineDash([]);\n          }\n          p5.line(c.x, c.y, next.x, next.y)\n        }\n      })\n  }\n\n  const drawTeam = (p5, canvasEl) => {\n    canvasEl.drawingContext.setLineDash([]);\n    p5.stroke(0, 0, 0)\n    team.forEach(t => {\n      const m = members.find(m => m.id === t.id)\n      if(m){\n        const center = m.getCenter()\n        p5.ellipse(center.x, center.y, m.size + 2)\n        p5.image(m.img, m.coordinates.x, m.coordinates.y, m.size, m.size)\n      }\n    })\n  } \n\n  const getLine = (category: string) => {\n    switch (category.toLowerCase()){\n      case 'frontend':\n        return {\n          color: {\n            r: 255, \n            g: 255, \n            b: 255\n          },\n          strokeWeight: 2,\n          style: 'line'\n        }\n      case 'design':\n        return {\n          color: {\n            r: 0, \n            g: 0, \n            b: 0\n          },\n          strokeWeight: 2,\n          style: 'dash'\n        }\n      case 'management':\n        return {\n          color: {\n            r: 255, \n            g: 255, \n            b: 255\n          },\n          strokeWeight: 2,\n          style: 'dash'\n        }\n      default:\n        return {\n          color: {\n            r: 0, \n            g: 0, \n            b: 0\n          },\n          strokeWeight: 2,\n          style: 'line'\n        }\n    }\n  }\n\n  const draw = (p5: p5Types) => {\n    drawRelations(p5, canvasEl)\n    drawTeam(p5, canvasEl)\n  }\n\n\n  const mouseDragged = (p5: p5Types) => {\n    setDrag(true)\n    const { mouseX, mouseY } = p5\n    const halfSize = Math.floor(size)\n    const x = mouseX > halfSize ? (mouseX < (canvas.width - halfSize) ? mouseX : canvas.width - halfSize) : halfSize\n    const y = mouseY > halfSize ? (mouseY < (canvas.height - halfSize) ? mouseY : canvas.height - halfSize) : halfSize\n    if (mouseX === x || mouseY === y) {\n      if (drag) {\n        if (draggedMember) {\n          draggedMember.setNewCenter(x, y)\n        }\n      } else {  \n        const member = getActiveElement(p5, x, y)\n        if (member) {\n          member.setNewCenter(x, y)\n          setDraggedMember(member)\n        }\n      }\n    return false\n    } \n  }\n\n  const mouseReleased = () => {\n    setTimeout(() => {\n      setDraggedMember(null)\n      setDrag(false)\n    })\n  }\n\n  const mouseClicked = (p5: p5Types) => {\n    const { mouseX, mouseY } = p5\n    const member = getActiveElement(p5, mouseX, mouseY)\n    if (member && !drag) {\n      if (!activeMember || activeMember.id !== member.id) {\n        setActiveMember(member)\n      } else {\n        setActiveMember(null)\n      }\n    }\n  }\n\n  const getActiveElement = (p5: p5Types, x, y) => {\n    let minDist = p5.max(canvas.width, canvas.height) \n    let member = null\n    members.forEach(m => {\n      const center = m.getCenter()\n      const dist = p5.dist(center.x, center.y, x, y)\n      const halfSize = Math.floor(m.size / 2)\n      if (dist < halfSize && dist < minDist) {\n        minDist = dist\n        member = m\n      }\n    })\n    return member\n  }\n\n  const rightActiveMember = activeMember && (activeMember.coordinates.x > (Math.floor(canvas.width / 2)))\n\n  const getMemberStyle = (right: boolean) => {\n    if (activeMember) {\n      const top = activeMember.coordinates.y\n      if (right) {\n        return {\n          top,\n          right: canvas.width - activeMember.coordinates.x\n        }\n      } else {\n        return {\n          top,\n          left: activeMember.coordinates.x + activeMember.size\n        }\n      }\n    } else {\n      return {}\n    }\n  }\n\n  const memberStyle = getMemberStyle(rightActiveMember)\n\n  const toggleDescription = () => {\n    setActiveMember(null)\n  } \n\n  const handleClick = (event) => {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"cp-team__list\">\n      <Sketch \n        preload={preload} \n        draw={draw} \n        setup={setup} \n        mouseDragged={mouseDragged} \n        mouseReleased={mouseReleased} \n        mouseClicked={mouseClicked} />\n      {activeMember && <MemberDescription visible={!!activeMember} right={rightActiveMember} memberStyle={memberStyle}\n          member={activeMember} handleClick={handleClick} toggleDescription={toggleDescription} />}\n    </div>\n  )\n}\n\nexport default TeamRelations"],"sourceRoot":""}