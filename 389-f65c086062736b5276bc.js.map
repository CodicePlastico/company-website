{"version":3,"file":"389-f65c086062736b5276bc.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/assets/venues/barlow_condensed.ttf","webpack://gatsby-starter-default/./src/components/venues/planet.ts","webpack://gatsby-starter-default/./src/components/venues/universe.ts","webpack://gatsby-starter-default/./src/components/venues/venues.tsx"],"sourcesContent":["export default __webpack_public_path__ + \"static/barlow_condensed-0bac2bb11e1b52510a922c47bd0e7456.ttf\";","import p5Types from 'p5'\nimport { Coordinates, Axis } from './model'\n\nclass Planet {\n  planetId: string\n  planetName: string\n  coordinates: Coordinates\n  size: number\n  img: p5Types.Image\n  xDirection: number;\n  yDirection: number;\n\n  constructor(planetId: string, planetName: string, startX: number, startY: number, size: number, img: p5Types.Image) {\n    this.planetName = planetName\n    this.planetId = planetId,\n    this.coordinates = {x: startX, y: startY}\n    this.size = size\n    this.img = img\n    this.xDirection = Math.random() > 0.5 ? 1 : -1;\n    this.yDirection = Math.random() > 0.5 ? 1 : -1;\n  }\n\n  nextCoordinates(): Coordinates {\n    const x = this.coordinates.x + this.xDirection\n    const y = this.coordinates.y + this.yDirection\n    return {x, y}\n  }\n\n  setCoordinates(coords: Coordinates) {\n    this.coordinates = coords;\n  }\n\n  getCenter(): Coordinates {\n    const halfSize = Math.floor(this.size / 2)\n    return {x: this.coordinates.x + halfSize, y: this.coordinates.y + halfSize}\n  }\n\n  invertDirection(axis?: Axis) {\n    switch (axis) {\n      case 'x':\n        this.xDirection = -1 * this.xDirection\n        break;\n      case 'y':\n        this.yDirection = -1 * this.yDirection\n        break;\n      default:\n        this.xDirection = -1 * this.xDirection\n        this.yDirection = -1 * this.yDirection\n    }\n  }\n\n  fixMovement(universe) {\n    const nextCoords = this.nextCoordinates();\n    let x = nextCoords.x\n    let y = nextCoords.y\n    if (universe.isHorizontalOutside(nextCoords.x, this.size)) {\n      this.invertDirection('x')\n      x = this.coordinates.x\n    }\n    if (universe.isVerticalOutside(nextCoords.y, this.size)) {\n      this.invertDirection('y')\n      y = this.coordinates.y\n    }\n    this.setCoordinates({x, y})\n\n  }\n}\n\nexport default Planet","import Planet from \"./planet\"\nimport p5Types from 'p5'\n\nclass Universe {\n  width: number\n  height: number\n  p5: p5Types\n\n  constructor(p5: p5Types, width: number, height: number) {\n    this.width = width\n    this.height = height\n    this.p5 = p5\n  }\n\n  isHorizontalOutside(x: number, size: number): boolean {\n    return x > this.width - size || x < 0\n  }\n\n  isVerticalOutside(y: number, size: number): boolean {\n    return y > this.height - size || y < 0\n  }\n\n  detectCollision(planet1: Planet, planet2: Planet) {\n    const firstCenter = planet1.getCenter()\n    const secondCenter = planet2.getCenter()\n    const dist = this.p5.dist(firstCenter.x, firstCenter.y, secondCenter.x, secondCenter.y)\n    const firstSize = Math.floor(planet1.size / 2)\n    const secondSize = Math.floor(planet2.size / 2)\n    const collision = dist <= (firstSize + secondSize)\n    return collision;\n  }\n\n  leftSide(planet) {\n    const center = planet.getCenter()\n    return (center.x < (this.width / 2))\n  }\n}\n\nexport default Universe","import React from 'react'\nimport Sketch from 'react-p5'\nimport p5Types from 'p5'\n\nimport data from '../../assets/venues/venues.json'\n\nimport fontFile from '../../assets/venues/barlow_condensed.ttf'\n\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Planet from './planet'\nimport Universe from './universe'\n\nconst Venues: React.FC<{}> = () => {\n  let universe: Universe\n  let planets: Planet[] = []\n  const mobile = window.innerWidth < 769\n  const frameRate = 30\n  const fontSize = mobile ? 12 : 16\n  const fontBgWidth = mobile ? 60 : 100\n  const fontBgHeight = mobile ? 22 : 26\n  let font\n\n  const files = useStaticQuery(graphql`\n    query MyQuery {\n      headquarter: file(relativePath: { eq: \"venues/cpship.png\" }) {\n        childImageSharp {\n          fluid {\n            src\n            presentationHeight\n            presentationWidth\n          }\n        }\n      }\n      planet1: file(relativePath: { eq: \"venues/planet1.png\" }) {\n        childImageSharp {\n          fluid {\n            src\n            presentationHeight\n            presentationWidth\n          }\n        }\n      }\n      planet2: file(relativePath: { eq: \"venues/planet2.png\" }) {\n        childImageSharp {\n          fluid {\n            src\n            presentationHeight\n            presentationWidth\n          }\n        }\n      },\n      font: file(relativePath: { eq: \"venues/barlow_condensed.ttf\" }) {\n        publicURL\n      }\n    }`\n  )\n\n  const calculateBezierCoords = (first: Planet, second: Planet) => {\n    const firstCenter = first.getCenter()\n    const secondCenter = second.getCenter()\n    return {\n      x1: firstCenter.x,\n      y1: firstCenter.y,\n      x2: firstCenter.x + first.size, \n      y2: firstCenter.y + first.size, \n      x3: secondCenter.x - second.size, \n      y3: secondCenter.y - second.size,\n      x4: secondCenter.x, \n      y4: secondCenter.y\n    }\n  }\n\n  const preload = (p5: p5Types) => {\n    const universeWidth = p5.min(1600, window.innerWidth - 40)\n    const universeHeight = p5.min(1000, window.innerHeight - 200)\n    universe = new Universe(p5, universeWidth, universeHeight)\n    const { venues } = data \n    font = p5.loadFont(fontFile)\n    let startX = 0\n    const planetsSize = venues.reduce((sum, ven) => {\n      return sum + ven.size + 30\n    }, 0)\n    const sizeProportion = planetsSize < universeWidth ? 1 : planetsSize / universeWidth;\n    const offset = planetsSize > universeWidth ? 10 : Math.floor((universeWidth - planetsSize) / venues.length);\n    planets = venues.reduce((acc, v) => {\n      const queryImg = files[v.picture]\n      if (queryImg){\n        const fluidImg = queryImg.childImageSharp.fluid.src\n        const img = p5.loadImage(fluidImg)\n        const size = Math.floor(v.size / sizeProportion)\n        const startY = p5.random(0, universeHeight - size)\n        const planet = new Planet(v.id, v.name, startX, startY, size, img)\n        startX = startX + size + offset\n        return [...acc, planet]\n      }\n      return acc\n    }, [])\n  }\n\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n    p5.createCanvas(universe.width, universe.height).parent(canvasParentRef)\n    p5.frameRate(frameRate)\n    p5.textFont(font);\n  }\n\n  const draw = (p5: p5Types) => {\n    p5.background(255)\n    p5.noFill()\n    p5.stroke(217, 50, 50)\n    p5.strokeWeight(3)\n    planets.forEach((p, i) => {\n      p.fixMovement(universe)\n      for (let j = i + 1; j < planets.length; j++){\n        const firstP = planets[i];\n        const secondP = planets[j];\n        if(universe.detectCollision(firstP, secondP)) {\n          firstP.invertDirection()\n          secondP.invertDirection()\n        }\n        const bC = calculateBezierCoords(firstP, secondP)\n        p5.bezier(bC.x1, bC.y1, bC.x2, bC.y2, bC.x3, bC.y3, bC.x4, bC.y4);\n      }\n    })\n    p5.textSize(fontSize);\n    p5.strokeWeight(1)  \n    planets.forEach(p => {\n      const {x, y} = p.coordinates\n      p5.image(p.img, x, y, p.size, p.size)\n    })\n    planets.forEach(p => {\n      const center = p.getCenter()\n      let textPosition = {x: center.x, y: center.y}\n      if (universe.leftSide(p)){\n        textPosition.x = center.x + (p.size / 2) - (mobile ? 0 : 40)\n      } else {\n        textPosition.x = center.x - (p.size / 2) - (mobile ? fontBgWidth : 60)\n      }\n      const textBox = font.textBounds(p.planetName, textPosition.x, textPosition.y, fontSize);\n      p5.stroke(0)\n      p5.fill(0)\n      if (p.planetId === 'headquarter') {\n        p5.stroke(217, 50, 50)\n        p5.fill(217, 50, 50)\n      }\n      p5.rect(textBox.x, textBox.y, fontBgWidth, fontBgHeight);\n      p5.stroke(255)\n      p5.fill(255)\n      p5.text(p.planetName, textPosition.x + ((fontBgWidth - textBox.w) / 2), textPosition.y + ((fontBgHeight - textBox.h) / 2));\n    })\n  }\n\n  return <Sketch preload={preload} setup={setup} draw={draw} />\n}\n\nexport default Venues\n"],"names":["planetId","planetName","startX","startY","size","img","this","coordinates","x","y","xDirection","Math","random","yDirection","nextCoordinates","setCoordinates","coords","getCenter","halfSize","floor","invertDirection","axis","fixMovement","universe","nextCoords","isHorizontalOutside","isVerticalOutside","p5","width","height","detectCollision","planet1","planet2","firstCenter","secondCenter","dist","leftSide","planet","font","planets","mobile","window","innerWidth","fontSize","fontBgWidth","fontBgHeight","files","useStaticQuery","React","Sketch","preload","universeWidth","min","universeHeight","innerHeight","Universe","venues","data","loadFont","fontFile","planetsSize","reduce","sum","ven","sizeProportion","offset","length","acc","v","queryImg","picture","fluidImg","childImageSharp","fluid","src","loadImage","Planet","id","name","setup","canvasParentRef","createCanvas","parent","frameRate","textFont","draw","background","noFill","stroke","strokeWeight","forEach","p","i","j","firstP","secondP","bC","second","first","x1","y1","x2","y2","x3","y3","x4","y4","bezier","textSize","image","center","textPosition","textBox","textBounds","fill","rect","text","w","h"],"sourceRoot":""}